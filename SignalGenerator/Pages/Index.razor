@page "/"
@using SignalGenerator.Service
@using SignalGenerator.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject SignalGeneratorService SignalGeneratorService
@inject NavigationManager Navigation

<h3>Signal Generator</h3>

<div>
    <label for="signalCount">Number of Signals:</label>
    <input type="number" id="signalCount" value="@_SignalConfigGeneration.SignalCount" @onchange="UpdateSignalCount" />
</div>

<div>
    <label for="minFrequency">Min Frequency (Hz):</label>
    <input type="number" id="minFrequency" value="@_SignalConfigGeneration.MinFrequency" @onchange="UpdateMinFrequency" />
</div>

<div>
    <label for="maxFrequency">Max Frequency (Hz):</label>
    <input type="number" id="maxFrequency" value="@_SignalConfigGeneration.MaxFrequency" @onchange="UpdateMaxFrequency" />
</div>

<div>
    <label for="interval">Interval (ms):</label>
    <input type="number" id="interval" value="@_SignalConfigGeneration.IntervalMs" @onchange="UpdateInterval" />
</div>

<button @onclick="StartGenerating">Start</button>
<button @onclick="StopGenerating">Stop</button>

<h4>Generated Signals</h4>
<ul>
    @foreach (var signal in signals)
    {
        <li>@signal.ToString("F4") Hz</li>
    }
</ul>

<h4>Time Remaining: @_SignalConfigGeneration.TimeRemainingSecs seconds</h4>

@code {
    private List<double> signals = new();
    private SignalConfigGeneration _SignalConfigGeneration = new SignalConfigGeneration();
    private HubConnection? connection;

    private void UpdateSignalCount(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            _SignalConfigGeneration.SignalCount = value;
            StateHasChanged();
        }
    }

    private void UpdateMinFrequency(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            _SignalConfigGeneration.MinFrequency = value;
            StateHasChanged();
        }
    }

    private void UpdateMaxFrequency(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            _SignalConfigGeneration.MaxFrequency = value;
            StateHasChanged();
        }
    }

    private void UpdateInterval(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            _SignalConfigGeneration.IntervalMs = value;
            SignalGeneratorService.UpdateInterval(value); // فقط مقدار Interval را تغییر بده
            StateHasChanged();
        }
    }

    private async Task StartGenerating()
    {
        SignalGeneratorService.StartSignalGeneration(_SignalConfigGeneration);
    }

    private async Task StopGenerating()
    {
        SignalGeneratorService.StopSignalGeneration();
    }

    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/signalHub"))
            .WithAutomaticReconnect()
            .Build();

        connection.On<List<double>>("ReceiveSignalData", (data) =>
        {
            signals = data;
            InvokeAsync(StateHasChanged);
        });

        connection.On<double>("UpdateTimeRemaining", (remainingTime) =>
        {
            _SignalConfigGeneration.TimeRemainingSecs = remainingTime;
            InvokeAsync(StateHasChanged);
        });

        await connection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (connection is { State: HubConnectionState.Connected })
        {
            await connection.StopAsync();
            await connection.DisposeAsync();
        }
    }
}
